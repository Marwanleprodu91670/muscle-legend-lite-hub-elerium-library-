--Main Script
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/adopttesting/Testing/refs/heads/main/Library", true))()

local window = library:AddWindow("Lite Hub V5 Paid Version | Adopt Script", {
    main_color = Color3.fromRGB(0,0,0), -- Color
    min_size = Vector2.new(700, 640), -- Size of the gui
    can_resize = false, -- true or false
})

local Client = window:AddTab("Client")
Client:AddLabel("Local Player")

Client:AddButton("Hide Pets",function()
	local args = {
    [1] = "hidePets"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("showPetsEvent"):FireServer(unpack(args))

end)


-- Set Size 2
Client:AddButton("Set Size nan", function()
    local args = {
        [1] = "changeSize",
        [2] = "nan"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("changeSpeedSizeRemote"):InvokeServer(unpack(args))
end)

Client:AddButton("Set Size 2", function()
    local args = {
        [1] = "changeSize",
        [2] = "2"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("changeSpeedSizeRemote"):InvokeServer(unpack(args))
end)

local selectedWalkSpeed = 16 -- Default WalkSpeed value
local selectedJumpPower = 50 -- Default JumpPower value

-- TextBox to enter WalkSpeed
Client:AddTextBox("Set WalkSpeed", function(text)
    local walkSpeedValue = tonumber(text) -- Convert text to a number

    if walkSpeedValue and walkSpeedValue >= 1 and walkSpeedValue <= 500 then
        selectedWalkSpeed = walkSpeedValue -- Store the valid WalkSpeed
    end
end)

-- Toggle to apply WalkSpeed
Client:AddSwitch("Apply WalkSpeed", function(bool)
    if bool then
        local player = game:GetService("Players").LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = selectedWalkSpeed
        end
    end
end)

-- TextBox to enter JumpPower
Client:AddTextBox("Set JumpPower", function(text)
    local jumpPowerValue = tonumber(text) -- Convert text to a number

    if jumpPowerValue and jumpPowerValue >= 1 and jumpPowerValue <= 500 then
        selectedJumpPower = jumpPowerValue -- Store the valid JumpPower
    end
end)



-- Toggle to apply JumpPower
Client:AddSwitch("Apply JumpPower", function(bool)
    if bool then
        local player = game:GetService("Players").LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = selectedJumpPower
        end
    end
end)

local selectedSize = 2 -- Default size value

-- TextBox to enter the size
Client:AddTextBox("Set Size", function(text)
    local sizeValue = tonumber(text) -- Convert text to a number
    
    if sizeValue and sizeValue >= 1 and sizeValue <= 100 then
        selectedSize = sizeValue -- Store the valid size
    end
end)

-- Toggle to apply the size change
Client:AddSwitch("Apply Size", function(bool)
    if bool then
        -- Validate that ReplicatedStorage and the event exist
        local replicatedStorage = game:GetService("ReplicatedStorage")
        local rEvents = replicatedStorage:FindFirstChild("rEvents")
        local remoteEvent = rEvents and rEvents:FindFirstChild("changeSpeedSizeRemote")

        if remoteEvent and remoteEvent:IsA("RemoteFunction") then
            pcall(function()
                remoteEvent:InvokeServer("changeSize", selectedSize)
            end)
        end
    end
end)

local Maintab = window:AddTab("Main")

-- Anti Crash Button
Maintab:AddButton("Anti Crash", function()
    wait(0.5)
    local ba = Instance.new("ScreenGui")
    local ca = Instance.new("TextLabel")
    local da = Instance.new("Frame")
    local _b = Instance.new("TextLabel")
    local ab = Instance.new("TextLabel")

    ba.Parent = game.CoreGui
    ba.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    ca.Parent = ba
    ca.Active = true
    ca.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
    ca.Draggable = true
    ca.Position = UDim2.new(0.698610067, 0, 0.098096624, 0)
    ca.Size = UDim2.new(0, 370, 0, 52)
    ca.Font = Enum.Font.SourceSansSemibold
    ca.Text = "Anti Afk"
    ca.TextColor3 = Color3.new(0, 1, 1)
    ca.TextSize = 22

    da.Parent = ca
    da.BackgroundColor3 = Color3.new(0.196078, 0.196078, 0.196078)
    da.Position = UDim2.new(0, 0, 1.0192306, 0)
    da.Size = UDim2.new(0, 370, 0, 107)

    _b.Parent = da
    _b.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
    _b.Position = UDim2.new(0, 0, 0.800455689, 0)
    _b.Size = UDim2.new(0, 370, 0, 21)
    _b.Font = Enum.Font.Arial
    _b.Text = "Made by luca#5432"
    _b.TextColor3 = Color3.new(0, 1, 1)
    _b.TextSize = 20

    ab.Parent = da
    ab.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
    ab.Position = UDim2.new(0, 0, 0.158377, 0)
    ab.Size = UDim2.new(0, 370, 0, 44)
    ab.Font = Enum.Font.ArialBold
    ab.Text = "Status: Active"
    ab.TextColor3 = Color3.new(0, 1, 1)
    ab.TextSize = 20

    local bb = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        bb:CaptureController()
        bb:ClickButton2(Vector2.new())
        ab.Text = "Roblox tried kicking you, but I didnâ€™t let them!"
        wait(2)
        ab.Text = "Status: Active"
    end)
end)

-- Destroy Ad teleport Button
Maintab:AddButton("Destroy Ad teleport", function()
    local part = workspace:FindFirstChild("RobloxForwardPortals")
    if part then
        part:Destroy()
        print("Part 'RobloxForwardPortals' has been destroyed.")
    else
        print("Part 'RobloxForwardPortals' not found.")
    end
end)



-- Rock Farming v1 Section
local folder2 = Maintab:AddFolder("Rock Farming v1")
folder2:AddLabel("Coming Soon")

-- Brawl Things
local folder3 = Maintab:AddFolder("Brawl")

-- God Mode Toggle
folder3:AddSwitch("God Mode (Brawl)", function(State)
    godModeToggle = State
    if godModeToggle then
        task.spawn(function()
            while godModeToggle do
                local args = { [1] = "joinBrawl" }
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("brawlEvent"):FireServer(unpack(args))
                task.wait(0)  -- Repeat the event every 0 seconds
            end
        end)
    end
end)

-- Auto Join Brawl
folder3:AddSwitch("Auto Join Brawl", function(State)
    godModeToggle = State
    if godModeToggle then
        task.spawn(function()
            while godModeToggle do
                local args = { [1] = "joinBrawl" }
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("brawlEvent"):FireServer(unpack(args))
                task.wait(2)  -- Repeat the event every 2 seconds
            end
        end)
    end
end)

-- Auto Farm Tab
local AutoFarm = window:AddTab("Auto Farm")

AutoFarm:AddLabel("Reps")

local switch = AutoFarm:AddSwitch("Auto Farm", function(bool)
    local shouldRun = bool  -- Set the flag based on the toggle state

    -- Only start running the loop if the toggle is on
    if bool then
        while shouldRun do
            local args = { [1] = "rep" }

            -- Fire the muscle event on the server
            game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer(unpack(args))

            -- Wait for 0.1 seconds before firing again
            wait(0.1)
            
            -- Check if the toggle was turned off
            shouldRun = bool
        end
    end
end)


AutoFarm:AddLabel("Tools")

local player = game.Players.LocalPlayer
local playerName = player.Name

-- Function to handle the usage of any tool with no animation
local function useTool(toolName, eventName)
    local tool = player.Backpack:FindFirstChild(toolName) or game.Workspace:FindFirstChild(playerName):FindFirstChild(toolName)

    if tool then
        if tool.Parent ~= game.Workspace:FindFirstChild(playerName) then
            tool.Parent = game.Workspace:FindFirstChild(playerName) -- Equip the tool
        end
        
        -- Fire event to use the tool without animation
        game.Players.LocalPlayer.muscleEvent:FireServer(eventName, "rightHand")
        game.Players.LocalPlayer.muscleEvent:FireServer(eventName, "leftHand")

        -- Disable animation (adjust as needed for your specific game)
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, false)

        wait() -- Adjust delay as needed
    else
        warn(toolName .. " tool not found")
    end
end

-- Auto Weight Toggle
local switchWeight = AutoFarm:AddSwitch("Auto Weight", function(bool)
    _G.autoWeightUse = bool

    if bool then
        while _G.autoWeightUse do
            useTool("Weight", "useWeight")  -- Use the weight tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoWeightUse = false
    end
end)

-- Auto Pushups Toggle
local switchPushups = AutoFarm:AddSwitch("Auto Pushups", function(bool)
    _G.autoPushupsUse = bool

    if bool then
        while _G.autoPushupsUse do
            useTool("Pushups", "usePushups")  -- Use the pushups tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoPushupsUse = false
    end
end)

-- Auto Handstands Toggle
local switchHandstands = AutoFarm:AddSwitch("Auto Handstands", function(bool)
    _G.autoHandstandsUse = bool

    if bool then
        while _G.autoHandstandsUse do
            useTool("Handstands", "useHandstands")  -- Use the handstands tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoHandstandsUse = false
    end
end)

-- Auto Situps Toggle
local switchSitups = AutoFarm:AddSwitch("Auto Situps", function(bool)
    _G.autoSitupsUse = bool

    if bool then
        while _G.autoSitupsUse do
            useTool("Situps", "useSitups")  -- Use the situps tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoSitupsUse = false
    end
end)



AutoFarm:AddLabel("Normal Farming")

local folder = AutoFarm:AddFolder("Jungle Farming")

local isInfiniteEventEnabled = false
local eventThread = nil  -- Thread for infinite event loop

-- Generalized function to fire events for any machine
function FireInfiniteEvents(machineName)
    local machine = workspace:WaitForChild("machinesFolder"):WaitForChild(machineName):WaitForChild("interactSeat")

    while isInfiniteEventEnabled do
        -- First event (muscleEvent)
        local args1 = { [1] = "rep", [2] = machine }
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer(unpack(args1))

        -- Second event (machineInteractRemote)
        local args2 = { [1] = "useMachine", [2] = machine }
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("machineInteractRemote"):InvokeServer(unpack(args2))

        -- Wait before repeating
        wait(0.1)
    end
end

-- Toggle callback for Jungle Squat
folder:AddSwitch("Auto Jungle Squat", function(bool)
    isInfiniteEventEnabled = bool
    if isInfiniteEventEnabled then
        if not eventThread then
            eventThread = spawn(function() FireInfiniteEvents("Jungle Squat") end)
        end
    else
        if eventThread then
            eventThread = nil
        end
    end
end)

-- Toggle callback for Jungle Bench
folder:AddSwitch("Auto Jungle Bench", function(bool)
    isInfiniteEventEnabled = bool
    if isInfiniteEventEnabled then
        if not eventThread then
            eventThread = spawn(function() FireInfiniteEvents("Jungle Bench") end)
        end
    else
        if eventThread then
            eventThread = nil
        end
    end
end)

local folder2 = AutoFarm:AddFolder("Muscle King Farming")

-- Toggle callback for Muscle King Bench
folder2:AddSwitch("Auto Muscle King Bench", function(bool)
    isInfiniteEventEnabled = bool
    if isInfiniteEventEnabled then
        if not eventThread then
            eventThread = spawn(function() FireInfiniteEvents("Muscle King Bench") end)
        end
    else
        if eventThread then
            eventThread = nil
        end
    end
end)

-- Toggle callback for Muscle King Lift
folder2:AddSwitch("Auto Muscle King Lift", function(bool)
    isInfiniteEventEnabled = bool
    if isInfiniteEventEnabled then
        if not eventThread then
            eventThread = spawn(function() FireInfiniteEvents("Muscle King Lift") end)
        end
    else
        if eventThread then
            eventThread = nil
        end
    end
end)

--Killing Tab
local Killing = window:AddTab("Killing")
local whitelistedPlayers = {}  -- Table to store whitelisted players
local targetName = ""          -- Variable to store the target player's name
local killPlayersActive = false -- Variable to track the state of "Kill Players"
local autoKillActive = false   -- Variable to track the state of "Auto Kill"
local autoEquipPunchActive = false -- Variable to track the state of "Auto Equip Punch"
local killStartTime = 0        -- Timer for kill time
local killTimeLabel            -- Reference to the label

Killing:AddLabel("Whitelist")
Killing:AddTextBox("Whitelist Players", function(text)
    table.insert(whitelistedPlayers, text)
end)

Killing:AddTextBox("Unwhitelist Players", function(text)
    for i, player in ipairs(whitelistedPlayers) do
        if player == text then
            table.remove(whitelistedPlayers, i)
            break
        end
    end
end)

Killing:AddLabel("Auto Killing")

-- Function to restore visibility of players
local function restoreVisibility()
    for _, otherPlayer in pairs(game.Players:GetChildren()) do
        local character = game.Workspace:FindFirstChild(otherPlayer.Name)
        if character then
            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") or part:IsA("MeshPart") then
                    part.Transparency = 0
                    part.CanCollide = true
                end
            end
            -- Restore visibility of accessories and hair
            for _, accessory in pairs(character:GetChildren()) do
                if accessory:IsA("Accessory") or accessory:IsA("Hat") then
                    if accessory:FindFirstChild("Handle") then
                        accessory.Handle.Transparency = 0
                    end
                end
            end
        end
    end
end

-- Auto Kill Toggle
Killing:AddSwitch("Auto Kill", function(state)
    autoKillActive = state
    if autoKillActive then
        coroutine.wrap(function()
            local player = game.Players.LocalPlayer
            local playerName = player.Name

            while autoKillActive do
                -- Auto-equip Punch tool
                local punchTool = player.Backpack:FindFirstChild("Punch") or game.Workspace:FindFirstChild(playerName):FindFirstChild("Punch")
                if punchTool and punchTool.Parent ~= game.Workspace:FindFirstChild(playerName) then
                    punchTool.Parent = game.Workspace:FindFirstChild(playerName)
                end

                -- Punch action
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")

                -- Teleport and make invisible
                for _, otherPlayer in pairs(game.Players:GetChildren()) do
                    if otherPlayer.Name ~= playerName and not table.find(whitelistedPlayers, otherPlayer.Name) then
                        local character = game.Workspace:FindFirstChild(otherPlayer.Name)
                        local localCharacter = game.Workspace:FindFirstChild(playerName)

                        if character and localCharacter then
                            local rightHand = localCharacter:FindFirstChild("RightHand")
                            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

                            if rightHand and humanoidRootPart then
                                humanoidRootPart.CFrame = rightHand.CFrame

                                for _, part in pairs(character:GetChildren()) do
                                    if part:IsA("BasePart") or part:IsA("MeshPart") then
                                        part.Transparency = 1
                                        part.CanCollide = false
                                    end
                                end

                                -- Make accessories and hair invisible
                                for _, accessory in pairs(character:GetChildren()) do
                                    if accessory:IsA("Accessory") or accessory:IsA("Hat") then
                                        if accessory:FindFirstChild("Handle") then
                                            accessory.Handle.Transparency = 1
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                wait(0.1)
            end
        end)()
    else
        restoreVisibility()
    end
end)

-- Auto Equip Punch Toggle
Killing:AddSwitch("Auto Equip Punch", function(state)
    autoEquipPunchActive = state
    coroutine.wrap(function()
        while autoEquipPunchActive do
            local player = game.Players.LocalPlayer
            local playerName = player.Name
            local punchTool = player.Backpack:FindFirstChild("Punch") or game.Workspace:FindFirstChild(playerName):FindFirstChild("Punch")

            if punchTool and punchTool.Parent ~= game.Workspace:FindFirstChild(playerName) then
                punchTool.Parent = game.Workspace:FindFirstChild(playerName) -- Equip the tool
            end
            wait(0.1)
        end
    end)()
end)

Killing:AddLabel("Targeting")
Killing:AddTextBox("Target Name", function(text)
    targetName = text
end)

-- Kill Players toggle
Killing:AddSwitch("Kill Players", function(state)
    killPlayersActive = state
    if killPlayersActive then
        killStartTime = 0
        coroutine.wrap(function()
            local player = game.Players.LocalPlayer
            local playerName = player.Name

            while killPlayersActive do
                -- Auto-equip Punch tool
                local punchTool = player.Backpack:FindFirstChild("Punch") or game.Workspace:FindFirstChild(playerName):FindFirstChild("Punch")
                if punchTool and punchTool.Parent ~= game.Workspace:FindFirstChild(playerName) then
                    punchTool.Parent = game.Workspace:FindFirstChild(playerName)
                end

                -- Punch action
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")

                -- Target player handling
                if targetName ~= "" then
                    for _, otherPlayer in pairs(game.Players:GetChildren()) do
                        if otherPlayer.Name == targetName then
                            local character = game.Workspace:FindFirstChild(otherPlayer.Name)
                            local localCharacter = game.Workspace:FindFirstChild(playerName)

                            if character and localCharacter then
                                local rightHand = localCharacter:FindFirstChild("RightHand")
                                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

                                if rightHand and humanoidRootPart then
                                    humanoidRootPart.CFrame = rightHand.CFrame

                                    for _, part in pairs(character:GetChildren()) do
                                        if part:IsA("BasePart") or part:IsA("MeshPart") then
                                            part.Transparency = 1
                                            part.CanCollide = false
                                        end
                                    end

                                    -- Make accessories and hair invisible
                                    for _, accessory in pairs(character:GetChildren()) do
                                        if accessory:IsA("Accessory") or accessory:IsA("Hat") then
                                            if accessory:FindFirstChild("Handle") then
                                                accessory.Handle.Transparency = 1
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                wait(0.1)
            end
        end)()

        -- Start the kill timer
        coroutine.wrap(function()
            while killPlayersActive do
                wait(1)
                killStartTime = killStartTime + 1
                local minutes = math.floor(killStartTime / 60)
                local seconds = killStartTime % 60
                killTimeLabel:SetText(string.format("Amount Of Time Killing Player: %02d:%02d", minutes, seconds))
            end
        end)()
    else
        restoreVisibility()
        killTimeLabel:SetText("Amount Of Time Killing Player: 00:00")
    end
end)

-- Label for "Amount Of Time Killing Player:"
killTimeLabel = Killing:AddLabel("Amount Of Time Killing Player: 00:00")

local switch = Killing:AddSwitch("Auto Punch", function(state)
    local player = game.Players.LocalPlayer
    local playerName = player.Name
    local punchTool =
        player.Backpack:FindFirstChild("Punch") or
        game.Workspace:FindFirstChild(playerName):FindFirstChild("Punch")

    if state then
        -- Start the loop to equip and use the Punch tool
        while state do
            punchTool = player.Backpack:FindFirstChild("Punch") or
                        game.Workspace:FindFirstChild(playerName):FindFirstChild("Punch")
            
            if punchTool then
                -- Equip the Punch tool if not already equipped
                if punchTool.Parent ~= game.Workspace:FindFirstChild(playerName) then
                    punchTool.Parent = game.Workspace:FindFirstChild(playerName) -- Equip the tool
                end

                -- Use the Punch tool by firing the muscle event (if needed)
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
                
                -- Optionally, add a small delay to simulate the time between punches
                wait(0.1) -- Adjust the delay as needed for timing between punches
            else
                warn("Punch tool not found")
                break -- Exit the loop if the tool is not found
            end
        end
    else
        -- Stop the loop if the toggle is off
        -- This will stop the loop if the state is false
        print("Auto Punch is turned off")
    end
end)

local switch = Killing:AddSwitch("Auto Punch [No Animation]", function(state)
    local player = game.Players.LocalPlayer
    local playerName = player.Name
    local punchTool =
        player.Backpack:FindFirstChild("Punch") or
        game.Workspace:FindFirstChild(playerName):FindFirstChild("Punch")

    -- Global control variable to track if the loop should run
    if state then
        _G.autoPunchanim = true

        -- Start the auto-punch loop
        while _G.autoPunchanim do
            if punchTool then
                -- Equip the tool if it's not already equipped
                if punchTool.Parent ~= game.Workspace:FindFirstChild(playerName) then
                    punchTool.Parent = game.Workspace:FindFirstChild(playerName) -- Equip the tool
                end

                -- Trigger punches
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")

                -- Adjust timing between punches
                wait(0.1)  -- Adjust the delay as needed for timing between punches
            else
                warn("Punch tool not found")
                _G.autoPunchanim = false -- Stop the loop if tool is not found
            end
        end
    else
        -- Stop the auto-punch loop
        _G.autoPunchanim = false
    end
end)

-- Teleport Tab
local Teleport = window:AddTab("Teleport")

local locations = {
    {"Beach", Vector3.new(-11, 5, -178)},
    {"Legends Island", Vector3.new(4603, 989, -3898)},
    {"Muscle King Gym", Vector3.new(-8626, 15, -5730)},
    {"Tiny Island", Vector3.new(-38, 5, 1884)},
    {"Secret Location", Vector3.new(-2596, -1, 5738)},
    {"Inferno Island", Vector3.new(-6759, 5, -1285)},
    {"Frost Island", Vector3.new(-2623, 5, -409)},
    {"Mythical Island", Vector3.new(2251, 5, 1073)}
}

-- Iterate over each location and create a button for it
for _, location in ipairs(locations) do
    local name, position = location[1], location[2]
    Teleport:AddButton(name, function()
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(position))
    end)
end

                             
        
-- View Stats Tab
local Playertab = window:AddTab("Player")

Playertab:AddLabel("Spying")

local selectedPlayerName = "" -- Variable to store player name

-- Switch for spying on a player
local switch = Playertab:AddSwitch("Spy Player", function(bool)
    if bool then
        -- Find the player in the game
        local player = game.Players:FindFirstChild(selectedPlayerName)
        
        if player and player.Character then
            local character = player.Character:FindFirstChild("HumanoidRootPart")
            if character then
                local camera = game.Workspace.CurrentCamera
                camera.CameraSubject = character -- Follow the player
                camera.CameraType = Enum.CameraType.Follow -- Ensures smooth tracking
            end
        else
            print("Player not found or not loaded.")
        end
    else
        -- Reset the camera back to the default view
        local camera = game.Workspace.CurrentCamera
        camera.CameraSubject = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") -- Focus on the local player
        camera.CameraType = Enum.CameraType.Custom
    end
end)

-- Textbox setup to capture player name
Playertab:AddTextBox("Player Name", function(text)
    if text and text ~= "" then
        selectedPlayerName = text -- Store the inputted player name
    end
end)


Playertab:AddButton("Clear",function()
	-- Code here
end)

Playertab:AddButton("Teleport To Player", function()
    local localPlayer = game.Players.LocalPlayer -- Get the local player
    local character = localPlayer.Character -- Get the local player's character

    if selectedPlayerName and selectedPlayerName ~= "" then
        local targetPlayer = game.Players:FindFirstChild(selectedPlayerName) -- Find the target player
        
        if targetPlayer and targetPlayer.Character then
            local targetPosition = targetPlayer.Character:FindFirstChild("HumanoidRootPart") -- Get target's position
            
            if character and targetPosition then
                character:MoveTo(targetPosition.Position) -- Teleport the local player
            else
                print("Target player's HumanoidRootPart not found.")
            end
        else
            print("Player not found or not loaded.")
        end
    else
        print("No player selected.")
    end
end)

Playertab:AddLabel("View Stats")



local playerData = {}
local currentSelectedPlayer = nil
local notFoundLabel = nil
local selectedPlayerName = nil

-- Helper function to abbreviate large numbers
local function abbreviateNumber(value)
    if value >= 1e15 then
        return string.format("%.1fQa", value / 1e15)
    elseif value >= 1e12 then
        return string.format("%.1fT", value / 1e12)
    elseif value >= 1e9 then
        return string.format("%.1fB", value / 1e9)
    elseif value >= 1e6 then
        return string.format("%.1fM", value / 1e6)
    elseif value >= 1e3 then
        return string.format("%.1fK", value / 1e3)
    else
        return tostring(value)
    end
end

-- Function to create labels for the selected player's stats
local function createPlayerLabels(player)
    local playerName = player.Name
    local leaderstats = player:FindFirstChild("leaderstats")
    local equippedPets = player:FindFirstChild("equippedPets")
    local ownedGamepasses = player:FindFirstChild("ownedGamepasses")

    -- Ensure leaderstats is present
    if not leaderstats then
        return
    end

    -- Create labels for stats
    local labels = {
        StrengthLabel = Playertab:AddLabel("Strength: " .. abbreviateNumber(leaderstats.Strength and leaderstats.Strength.Value or 0)),
        DurabilityLabel = Playertab:AddLabel("Durability: " .. abbreviateNumber(player.Durability and player.Durability.Value or 0)),
        KillsLabel = Playertabab:AddLabel("Kills: " .. abbreviateNumber(leaderstats.Kills and leaderstats.Kills.Value or 0)),
        BrawlsLabel = Playertab:AddLabel("Brawls: " .. abbreviateNumber(leaderstats.Brawls and leaderstats.Brawls.Value or 0)),
        AgilityLabel = Playeryab:AddLabel("Agility: " .. abbreviateNumber(player.Agility and player.Agility.Value or 0)),
        EvilKarmaLabel = Playertab:AddLabel("evilKarma: " .. abbreviateNumber(player.evilKarma and player.evilKarma.Value or 0)),
        GoodKarmaLabel = Playertab:AddLabel("goodKarma: " .. abbreviateNumber(player.goodKarma and player.goodKarma.Value or 0)),
        MapLabel = Playertab:AddLabel("Map: " .. (player.currentMap and player.currentMap.Value or "N/A")),
        KingTimeLabel = Playertab:AddLabel("KingTime: " .. abbreviateNumber(player.muscleKingTime and player.muscleKingTime.Value or 0)),
        PremiumLabel = Playertab:AddLabel("Premium: " .. (player.MembershipType == Enum.MembershipType.Premium and "true" or "false")),
    }

    -- Add pet labels (ensure equippedPets exists)
    if equippedPets then
        for i = 1, 5 do
            local petValue = equippedPets:FindFirstChild("pet" .. i) and equippedPets["pet" .. i].Value or "N/A"
            labels["Pet" .. i .. "Label"] = Playertab:AddLabel("Pet" .. i .. ": " .. tostring(petValue))
        end
    end

    -- Add owned gamepasses (ensure ownedGamepasses exists)
    local gamepassList = {}
    if ownedGamepasses then
        for _, gamepass in ipairs(ownedGamepasses:GetChildren()) do
            table.insert(gamepassList, gamepass.Name)
        end
    end

    local gamepassesText = #gamepassList > 0 and table.concat(gamepassList, ", ") or "N/A"
    labels.GamepassesLabel = Playertab:AddLabel("ownedGamepasses: " .. gamepassesText)

    playerData[playerName] = labels

    -- Connect value change events to update the labels
    if leaderstats.Kills then
        leaderstats.Kills.Changed:Connect(function()
            labels.KillsLabel.Text = "Kills: " .. abbreviateNumber(leaderstats.Kills.Value or 0)
        end)
    end

    if leaderstats.Strength then
        leaderstats.Strength.Changed:Connect(function()
            labels.StrengthLabel.Text = "Strength: " .. abbreviateNumber(leaderstats.Strength.Value or 0)
        end)
    end

    if leaderstats.Brawls then
        leaderstats.Brawls.Changed:Connect(function()
            labels.BrawlsLabel.Text = "Brawls: " .. abbreviateNumber(leaderstats.Brawls.Value or 0)
        end)
    end

    if player.Durability then
        player.Durability.Changed:Connect(function()
            labels.DurabilityLabel.Text = "Durability: " .. abbreviateNumber(player.Durability.Value or 0)
        end)
    end

    if player.Agility then
        player.Agility.Changed:Connect(function()
            labels.AgilityLabel.Text = "Agility: " .. abbreviateNumber(player.Agility.Value or 0)
        end)
    end

    if player.evilKarma then
        player.evilKarma.Changed:Connect(function()
            labels.EvilKarmaLabel.Text = "evilKarma: " .. abbreviateNumber(player.evilKarma.Value or 0)
        end)
    end

    if player.goodKarma then
        player.goodKarma.Changed:Connect(function()
            labels.GoodKarmaLabel.Text = "goodKarma: " .. abbreviateNumber(player.goodKarma.Value or 0)
        end)
    end
end

-- Function to remove player labels (cleanup)
local function removePlayerLabels(playerName)
    if playerData[playerName] then
        for _, label in pairs(playerData[playerName]) do
            label:Remove()
        end
        playerData[playerName] = nil
    end
end

-- Adding a textbox for player name input
local textbox = Playertab:AddTextBox("Player Name", function(playerName)
    selectedPlayerName = playerName
    if notFoundLabel then
        notFoundLabel:Remove()
        notFoundLabel = nil
    end

    local player = game.Players:FindFirstChild(playerName)
    if player then
        if currentSelectedPlayer then
            removePlayerLabels(currentSelectedPlayer)
        end
        createPlayerLabels(player)
        currentSelectedPlayer = playerName
    else
        notFoundLabel = Playertab:AddLabel("Player not found!")
    end
end)

--Server Tab
local Server = window:AddTab("Server")  
-- Initialize the time spent variable
local timeSpent = 0

-- Create the label (only once)
local label = Server:AddLabel("Amount Of Time Spent In Server: 0 weeks, 0 days, 0 hours, 0 minutes, 0 seconds")

-- Function to convert total seconds into weeks, days, hours, minutes, and seconds
local function convertTime(seconds)
    local weeks = math.floor(seconds / (7 * 24 * 3600))
    seconds = seconds - weeks * 7 * 24 * 3600
    local days = math.floor(seconds / (24 * 3600))
    seconds = seconds - days * 24 * 3600
    local hours = math.floor(seconds / 3600)
    seconds = seconds - hours * 3600
    local minutes = math.floor(seconds / 60)
    seconds = seconds - minutes * 60
    return weeks, days, hours, minutes, seconds
end

-- Function to update the label's text
local function updateLabel()
    -- Convert the total time spent into weeks, days, hours, minutes, and seconds
    local weeks, days, hours, minutes, seconds = convertTime(timeSpent)

    -- Format the time into a readable string
    local timeString = string.format(
        "Amount Of Time Spent In Server: %d weeks, %d days, %d hours, %d minutes, %d seconds",
        weeks, days, hours, minutes, seconds
    )

    -- Update the text of the label
    label.Text = timeString
end

-- Start a loop to update the label every second
while true do
    updateLabel()
    wait(1)  -- Wait for 1 second before updating again
    timeSpent = timeSpent + 1  -- Increment the time spent by 1 second
end

-- The credit tab because yes
window:AddTab("Credit")  
-- Adding the labels
Credit:AddLabel("Script Made By Adopt")
Credit:AddLabel("Grosse penser Ã  KLN qui a Ã©tÃ© la plus grosse victime durant les test du script, grosse force Ã  lui<3")
Credit:AddLabel("Discord Server: https://discord.gg/ZgDYgKa2")


















-- Show the window
window:Show()
