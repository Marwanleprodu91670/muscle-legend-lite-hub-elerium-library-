--Main Script
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/adopttesting/Testing/refs/heads/main/Library", true))()

local window = library:AddWindow("test 11.... | Adopt Script", {
    main_color = Color3.fromRGB(0,0,0), -- Color
    min_size = Vector2.new(700, 640), -- Size of the gui
    can_resize = false, -- true or false
})

local Client = window:AddTab("Client")
Client:AddLabel("Local Player")

-- Set Size 2
Client:AddButton("Set Size 2", function()
    local args = {
        [1] = "changeSize",
        [2] = 2
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("changeSpeedSizeRemote"):InvokeServer(unpack(args))
end)

local Maintab = window:AddTab("Main")

-- Anti Crash Button
Maintab:AddButton("Anti Crash", function()
    wait(0.5)
    local ba = Instance.new("ScreenGui")
    local ca = Instance.new("TextLabel")
    local da = Instance.new("Frame")
    local _b = Instance.new("TextLabel")
    local ab = Instance.new("TextLabel")

    ba.Parent = game.CoreGui
    ba.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    ca.Parent = ba
    ca.Active = true
    ca.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
    ca.Draggable = true
    ca.Position = UDim2.new(0.698610067, 0, 0.098096624, 0)
    ca.Size = UDim2.new(0, 370, 0, 52)
    ca.Font = Enum.Font.SourceSansSemibold
    ca.Text = "Anti Afk"
    ca.TextColor3 = Color3.new(0, 1, 1)
    ca.TextSize = 22

    da.Parent = ca
    da.BackgroundColor3 = Color3.new(0.196078, 0.196078, 0.196078)
    da.Position = UDim2.new(0, 0, 1.0192306, 0)
    da.Size = UDim2.new(0, 370, 0, 107)

    _b.Parent = da
    _b.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
    _b.Position = UDim2.new(0, 0, 0.800455689, 0)
    _b.Size = UDim2.new(0, 370, 0, 21)
    _b.Font = Enum.Font.Arial
    _b.Text = "Made by luca#5432"
    _b.TextColor3 = Color3.new(0, 1, 1)
    _b.TextSize = 20

    ab.Parent = da
    ab.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
    ab.Position = UDim2.new(0, 0, 0.158377, 0)
    ab.Size = UDim2.new(0, 370, 0, 44)
    ab.Font = Enum.Font.ArialBold
    ab.Text = "Status: Active"
    ab.TextColor3 = Color3.new(0, 1, 1)
    ab.TextSize = 20

    local bb = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        bb:CaptureController()
        bb:ClickButton2(Vector2.new())
        ab.Text = "Roblox tried kicking you, but I didnâ€™t let them!"
        wait(2)
        ab.Text = "Status: Active"
    end)
end)

-- Destroy Ad teleport Button
Maintab:AddButton("Destroy Ad teleport", function()
    local part = workspace:FindFirstChild("RobloxForwardPortals")
    if part then
        part:Destroy()
        print("Part 'RobloxForwardPortals' has been destroyed.")
    else
        print("Part 'RobloxForwardPortals' not found.")
    end
end)



-- Rock Farming v1 Section
local folder2 = Maintab:AddFolder("Rock Farming v1")
folder2:AddLabel("Coming Soon")

-- Brawl Things
local folder3 = Maintab:AddFolder("Brawl")

-- God Mode Toggle
folder3:AddSwitch("God Mode (Brawl)", function(State)
    godModeToggle = State
    if godModeToggle then
        task.spawn(function()
            while godModeToggle do
                local args = { [1] = "joinBrawl" }
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("brawlEvent"):FireServer(unpack(args))
                task.wait(0)  -- Repeat the event every 0 seconds
            end
        end)
    end
end)

-- Auto Join Brawl
folder3:AddSwitch("Auto Join Brawl", function(State)
    godModeToggle = State
    if godModeToggle then
        task.spawn(function()
            while godModeToggle do
                local args = { [1] = "joinBrawl" }
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("brawlEvent"):FireServer(unpack(args))
                task.wait(2)  -- Repeat the event every 2 seconds
            end
        end)
    end
end)

-- Auto Farm Tab
local AutoFarm = window:AddTab("Auto Farm")

AutoFarm:AddLabel("Reps")

local switch = AutoFarm:AddSwitch("Auto Farm", function(bool)
    if bool then
        -- Run the event every 0.1 second when toggle is on
        while switch:IsOn() do
            local args = {
                [1] = "rep"
            }

            -- Ensure muscleEvent is found before firing
            local muscleEvent = game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent")
            if muscleEvent then
                muscleEvent:FireServer(unpack(args))
            else
                warn("muscleEvent not found!")
            end

            wait(0.1)  -- Wait for 0.1 seconds before triggering the event again
        end
    end
end)



AutoFarm:AddLabel("Tools")

local player = game.Players.LocalPlayer
local playerName = player.Name

-- Function to handle the usage of any tool with no animation
local function useTool(toolName, eventName)
    local tool = player.Backpack:FindFirstChild(toolName) or game.Workspace:FindFirstChild(playerName):FindFirstChild(toolName)

    if tool then
        if tool.Parent ~= game.Workspace:FindFirstChild(playerName) then
            tool.Parent = game.Workspace:FindFirstChild(playerName) -- Equip the tool
        end
        
        -- Fire event to use the tool without animation
        game.Players.LocalPlayer.muscleEvent:FireServer(eventName, "rightHand")
        game.Players.LocalPlayer.muscleEvent:FireServer(eventName, "leftHand")

        -- Disable animation (adjust as needed for your specific game)
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, false)

        wait() -- Adjust delay as needed
    else
        warn(toolName .. " tool not found")
    end
end

-- Auto Weight Toggle
local switchWeight = AutoFarm:AddSwitch("Auto Weight", function(bool)
    _G.autoWeightUse = bool

    if bool then
        while _G.autoWeightUse do
            useTool("Weight", "useWeight")  -- Use the weight tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoWeightUse = false
    end
end)

-- Auto Pushups Toggle
local switchPushups = AutoFarm:AddSwitch("Auto Pushups", function(bool)
    _G.autoPushupsUse = bool

    if bool then
        while _G.autoPushupsUse do
            useTool("Pushups", "usePushups")  -- Use the pushups tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoPushupsUse = false
    end
end)

-- Auto Handstands Toggle
local switchHandstands = AutoFarm:AddSwitch("Auto Handstands", function(bool)
    _G.autoHandstandsUse = bool

    if bool then
        while _G.autoHandstandsUse do
            useTool("Handstands", "useHandstands")  -- Use the handstands tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoHandstandsUse = false
    end
end)

-- Auto Situps Toggle
local switchSitups = AutoFarm:AddSwitch("Auto Situps", function(bool)
    _G.autoSitupsUse = bool

    if bool then
        while _G.autoSitupsUse do
            useTool("Situps", "useSitups")  -- Use the situps tool
        end
    else
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        _G.autoSitupsUse = false
    end
end)



AutoFarm:AddLabel("Normal Farming")

local folder = AutoFarm:AddFolder("Jungle Farming")

local isInfiniteEventEnabled = false
local eventThread = nil  -- Thread for infinite event loop

-- Generalized function to fire events for any machine
function FireInfiniteEvents(machineName)
    local machine = workspace:WaitForChild("machinesFolder"):WaitForChild(machineName):WaitForChild("interactSeat")

    while isInfiniteEventEnabled do
        -- First event (muscleEvent)
        local args1 = { [1] = "rep", [2] = machine }
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer(unpack(args1))

        -- Second event (machineInteractRemote)
        local args2 = { [1] = "useMachine", [2] = machine }
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("machineInteractRemote"):InvokeServer(unpack(args2))

        -- Wait before repeating
        wait(0.1)
    end
end

-- Toggle callback for Jungle Squat
folder:AddSwitch("Auto Jungle Squat", function(bool)
    isInfiniteEventEnabled = bool
    if isInfiniteEventEnabled then
        if not eventThread then
            eventThread = spawn(function() FireInfiniteEvents("Jungle Squat") end)
        end
    else
        if eventThread then
            eventThread = nil
        end
    end
end)

-- Toggle callback for Jungle Bench
folder:AddSwitch("Auto Jungle Bench", function(bool)
    isInfiniteEventEnabled = bool
    if isInfiniteEventEnabled then
        if not eventThread then
            eventThread = spawn(function() FireInfiniteEvents("Jungle Bench") end)
        end
    else
        if eventThread then
            eventThread = nil
        end
    end
end)

local folder2 = AutoFarm:AddFolder("Muscle King Farming")

-- Toggle callback for Muscle King Bench
folder2:AddSwitch("Auto Muscle King Bench", function(bool)
    isInfiniteEventEnabled = bool
    if isInfiniteEventEnabled then
        if not eventThread then
            eventThread = spawn(function() FireInfiniteEvents("Muscle King Bench") end)
        end
    else
        if eventThread then
            eventThread = nil
        end
    end
end)

-- Toggle callback for Muscle King Lift
folder2:AddSwitch("Auto Muscle King Lift", function(bool)
    isInfiniteEventEnabled = bool
    if isInfiniteEventEnabled then
        if not eventThread then
            eventThread = spawn(function() FireInfiniteEvents("Muscle King Lift") end)
        end
    else
        if eventThread then
            eventThread = nil
        end
    end
end)




-- Teleport Tab
local Teleport = window:AddTab("Teleport")

local locations = {
    {"Beach", Vector3.new(-11, 5, -178)},
    {"Legends Island", Vector3.new(4603, 989, -3898)},
    {"Muscle King Gym", Vector3.new(-8626, 15, -5730)},
    {"Tiny Island", Vector3.new(-38, 5, 1884)},
    {"Secret Location", Vector3.new(-2596, -1, 5738)},
    {"Inferno Island", Vector3.new(-6759, 5, -1285)},
    {"Frost Island", Vector3.new(-2623, 5, -409)},
    {"Mythical Island", Vector3.new(2251, 5, 1073)}
}

-- Iterate over each location and create a button for it
for _, location in ipairs(locations) do
    local name, position = location[1], location[2]
    Teleport:AddButton(name, function()
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(position))
    end)
end

                             
        
-- View Stats Tab
local Playertab = window:AddTab("Player")

local switch = Playertab:AddSwitch("Spy Player", function(bool)
    -- Toggle logic: This part is triggered when the toggle is switched
    if bool then
        -- When the switch is turned on, check the textbox for a player's name
        local playerName = yourTextBox.Text -- replace 'yourTextBox' with your actual textbox variable

        -- Find the player in the game
        local player = game.Workspace:FindFirstChild(playerName)

        if player then
            -- If the player exists, set the camera to focus on their character
            local character = player:FindFirstChild("HumanoidRootPart")
            if character then
                game.Workspace.CurrentCamera.CameraSubject = character -- Sets the camera to the player's character
                game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Attach -- Makes the camera follow the player
            end
        else
            print("Player not found.")
        end
    else
        -- If the switch is turned off, you can add additional behavior (like resetting camera to default view)
        game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom -- This reverts the camera back to normal
    end
end)

-- Textbox setup to capture player name
Playertab:AddTextBox("Player Name", function(text)
    -- Check if a name is entered in the textbox
    if text and text ~= "" then
        -- Here you can implement additional logic based on the textbox input, if needed
        game:GetService("ReplicatedStorage").Events.FreeGifts.Gift2:FireServer(text, "Clicks", false, false, "Normal")
    end
end)

Playertab:AddButton("Clear",function()
	-- Code here
end)

Playertab:AddLabel("View Stats")



local playerData = {}
local currentSelectedPlayer = nil
local notFoundLabel = nil
local selectedPlayerName = nil

-- Helper function to abbreviate large numbers
local function abbreviateNumber(value)
    if value >= 1e15 then
        return string.format("%.1fQa", value / 1e15)
    elseif value >= 1e12 then
        return string.format("%.1fT", value / 1e12)
    elseif value >= 1e9 then
        return string.format("%.1fB", value / 1e9)
    elseif value >= 1e6 then
        return string.format("%.1fM", value / 1e6)
    elseif value >= 1e3 then
        return string.format("%.1fK", value / 1e3)
    else
        return tostring(value)
    end
end

-- Function to create labels for the selected player's stats
local function createPlayerLabels(player)
    local playerName = player.Name
    local leaderstats = player:FindFirstChild("leaderstats")
    local equippedPets = player:FindFirstChild("equippedPets")
    local ownedGamepasses = player:FindFirstChild("ownedGamepasses")

    -- Ensure leaderstats is present
    if not leaderstats then
        return
    end

    -- Create labels for stats
    local labels = {
        StrengthLabel = Playertab:AddLabel("Strength: " .. abbreviateNumber(leaderstats.Strength and leaderstats.Strength.Value or 0)),
        DurabilityLabel = Playertab:AddLabel("Durability: " .. abbreviateNumber(player.Durability and player.Durability.Value or 0)),
        KillsLabel = Playertabab:AddLabel("Kills: " .. abbreviateNumber(leaderstats.Kills and leaderstats.Kills.Value or 0)),
        BrawlsLabel = Playertab:AddLabel("Brawls: " .. abbreviateNumber(leaderstats.Brawls and leaderstats.Brawls.Value or 0)),
        AgilityLabel = Playeryab:AddLabel("Agility: " .. abbreviateNumber(player.Agility and player.Agility.Value or 0)),
        EvilKarmaLabel = Playertab:AddLabel("evilKarma: " .. abbreviateNumber(player.evilKarma and player.evilKarma.Value or 0)),
        GoodKarmaLabel = Playertab:AddLabel("goodKarma: " .. abbreviateNumber(player.goodKarma and player.goodKarma.Value or 0)),
        MapLabel = Playertab:AddLabel("Map: " .. (player.currentMap and player.currentMap.Value or "N/A")),
        KingTimeLabel = Playertab:AddLabel("KingTime: " .. abbreviateNumber(player.muscleKingTime and player.muscleKingTime.Value or 0)),
        PremiumLabel = Playertab:AddLabel("Premium: " .. (player.MembershipType == Enum.MembershipType.Premium and "true" or "false")),
    }

    -- Add pet labels (ensure equippedPets exists)
    if equippedPets then
        for i = 1, 5 do
            local petValue = equippedPets:FindFirstChild("pet" .. i) and equippedPets["pet" .. i].Value or "N/A"
            labels["Pet" .. i .. "Label"] = Playertab:AddLabel("Pet" .. i .. ": " .. tostring(petValue))
        end
    end

    -- Add owned gamepasses (ensure ownedGamepasses exists)
    local gamepassList = {}
    if ownedGamepasses then
        for _, gamepass in ipairs(ownedGamepasses:GetChildren()) do
            table.insert(gamepassList, gamepass.Name)
        end
    end

    local gamepassesText = #gamepassList > 0 and table.concat(gamepassList, ", ") or "N/A"
    labels.GamepassesLabel = Playertab:AddLabel("ownedGamepasses: " .. gamepassesText)

    playerData[playerName] = labels

    -- Connect value change events to update the labels
    if leaderstats.Kills then
        leaderstats.Kills.Changed:Connect(function()
            labels.KillsLabel.Text = "Kills: " .. abbreviateNumber(leaderstats.Kills.Value or 0)
        end)
    end

    if leaderstats.Strength then
        leaderstats.Strength.Changed:Connect(function()
            labels.StrengthLabel.Text = "Strength: " .. abbreviateNumber(leaderstats.Strength.Value or 0)
        end)
    end

    if leaderstats.Brawls then
        leaderstats.Brawls.Changed:Connect(function()
            labels.BrawlsLabel.Text = "Brawls: " .. abbreviateNumber(leaderstats.Brawls.Value or 0)
        end)
    end

    if player.Durability then
        player.Durability.Changed:Connect(function()
            labels.DurabilityLabel.Text = "Durability: " .. abbreviateNumber(player.Durability.Value or 0)
        end)
    end

    if player.Agility then
        player.Agility.Changed:Connect(function()
            labels.AgilityLabel.Text = "Agility: " .. abbreviateNumber(player.Agility.Value or 0)
        end)
    end

    if player.evilKarma then
        player.evilKarma.Changed:Connect(function()
            labels.EvilKarmaLabel.Text = "evilKarma: " .. abbreviateNumber(player.evilKarma.Value or 0)
        end)
    end

    if player.goodKarma then
        player.goodKarma.Changed:Connect(function()
            labels.GoodKarmaLabel.Text = "goodKarma: " .. abbreviateNumber(player.goodKarma.Value or 0)
        end)
    end
end

-- Function to remove player labels (cleanup)
local function removePlayerLabels(playerName)
    if playerData[playerName] then
        for _, label in pairs(playerData[playerName]) do
            label:Remove()
        end
        playerData[playerName] = nil
    end
end

-- Adding a textbox for player name input
local textbox = Playertab:AddTextBox("Player Name", function(playerName)
    selectedPlayerName = playerName
    if notFoundLabel then
        notFoundLabel:Remove()
        notFoundLabel = nil
    end

    local player = game.Players:FindFirstChild(playerName)
    if player then
        if currentSelectedPlayer then
            removePlayerLabels(currentSelectedPlayer)
        end
        createPlayerLabels(player)
        currentSelectedPlayer = playerName
    else
        notFoundLabel = Playertab:AddLabel("Player not found!")
    end
end)

-- The credit tab because yes
local Credittab = window:AddTab("Credit")  -- Adding the "Credit" tab

-- Adding the labels
Credittab:AddLabel("Script Made By Adopt")
Credittab:AddLabel("Discord Server: https://discord.gg/ZgDYgKa2")

local switch = Credittab:AddSwitch("Auto Kill", function(bool)
    _G.autoKill = bool

    if _G.autoKill then
        local player = game.Players.LocalPlayer
        local playerName = player.Name
        local punchTool = player.Backpack:FindFirstChild("Punch") or game.Workspace:FindFirstChild(playerName):FindFirstChild("Punch")

        _G.autoPunchanim = true -- Global control variable for auto punch

        -- Auto Punch Loop
        while _G.autoPunchanim and _G.autoKill do
            if punchTool then
                if punchTool.Parent ~= game.Workspace:FindFirstChild(playerName) then
                    punchTool.Parent = game.Workspace:FindFirstChild(playerName) -- Equip the tool
                end
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
                wait(0.1) -- Adjust timing for the delay between punches
            else
                warn("Punch tool not found")
                _G.autoPunchanim = false -- Stop if tool is missing
            end
        end

        -- Head Teleport Loop
        while _G.autoKill do
            for _, otherPlayer in pairs(game.Players:GetPlayers()) do
                if otherPlayer ~= player and otherPlayer.Character then
                    local head = otherPlayer.Character:FindFirstChild("Head")
                    local rightHand = otherPlayer.Character:FindFirstChild("RightHand")

                    if head and rightHand then
                        -- Break joints so only the head moves
                        head:BreakJoints()

                        -- Make the head invisible
                        head.Transparency = 1
                        head.CanCollide = false
                        head.Anchored = true

                        -- Teleport the head to the right hand
                        head.CFrame = rightHand.CFrame * CFrame.new(0, 0, 0) -- Adjust as needed
                    end
                end

                -- Hide Name GUI Elements
                local nameGui = otherPlayer:FindFirstChild("nameGui")
                if nameGui then
                    local strengthImage = nameGui:FindFirstChild("strengthImage")
                    local karmaLabel = nameGui:FindFirstChild("karmaLabel")
                    local nameLabel = nameGui:FindFirstChild("nameLabel")
                    local rankLabel = nameGui:FindFirstChild("rankLabel")

                    -- Set visibility of the 4 elements to false
                    if strengthImage then strengthImage.Visible = false end
                    if karmaLabel then karmaLabel.Visible = false end
                    if nameLabel then nameLabel.Visible = false end
                    if rankLabel then rankLabel.Visible = false end
                end
            end
            wait(0.2) -- Adjust as needed
        end
    else
        -- Turn off all loops and auto-punch animation when toggle is off
        _G.autoPunchanim = false
        _G.autoKill = false
    end
end)
















-- Show the window
window:Show()
